require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";function Chord(t,o,n,e,r){o.hasOwnProperty("names")&&(this.relNotes=o.notes,this.names=o.names,this.longName=o.longName),this.notes=t,this.abstr=n?!1:!0,this.relative=e||!1,this.relative=n.relative,this.tonic=n||new Note(0),this._type=r||"chord"}function fromNotation(t,o){var n,e,r="";if("scale"==o?(n=Scale.isValidScale(t),e=MUSIQ.scales,r="scale"):(n=isValidChord(t),e=MUSIQ.chords,r="chord"),!n)return console.warn("Chord not found : "+t),null;var i=Note.fromNotation(n[1]+(n[2]||"")),s=n[3];s&&0!=s.length||(s="major");var a=_.filter(e,function(t){return _.some(t.names,function(t){return t==s})});a.length>0,console.assert(1==a.length);var h=a[0].optional?_.union(a[0].notes,a[0].optional).sort(function(t,o){return t-o}):a[0].notes,c=_.map(h,function(t){return new Note(t).transpose(i.pos).relPos()}),l=new Chord(c,a[0],i,!1,r);return l}function fromNotes(t,o){var n=Chords.fromNotes(t,o);return n&&n.length>0?n[0]:null}function contains(t,o){return t.relative?_.contains(t.relNotes,o.relPos()):_.contains(t.notes,o.pos)}function notation(t){return this.abstr?this.names[0].replace("b","♭").replace("#","♯"):this.tonic.simpleNotation(t)+this.names[0].replace("b","♭").replace("#","♯")}function longNotation(t){return this.abstr?this.longName.replace("b","♭").replace("#","♯"):this.tonic.simpleNotation(t)+" "+this.longName.replace("b","♭").replace("#","♯")}function transpose(t){this.notes=_.map(this.notes,function(o){return o.transpose(t)}),this.tonic=this.tonic.transpose(t)}function noteObjects(){return this._notes?this._notes:(this._notes=_.map(this.relNotes,function(t){return new Note(this.tonic.pos+t)},this),this._notes)}function hasName(t){var o=isValidChord(t);if(!o)return!1;if(!this.tonic.hasName(o[1]+(o[2]||"")))return!1;var n=o[3]||"";""===n&&console.warn(n);var e=_.find(this.names,function(t){return n===t});return console.log(e),"undefined"==typeof e?!1:!0}function toString(){var t="[ ";return _.each(this.notes,function(o){t+=new Note(o)}),t}function minNotes(){return _.filter(this.notes,function(t){return!_.contains(this.optional,t)})}function type(){return this._type}function protoContains(t){return Chord.contains(this,t)}function isValidChord(t){if(!t)return!1;var o=t;t&&0!=t.length||(o="M");var n=_.reduce(MUSIQ.chords,function(t,o){var n=_.isString(t)?t:t.names.join("|")+"|"+t.longName;return n+"|"+o.names.join("|")+"|"+o.longName}),e=new RegExp("^"+MUSIQ.NOTE_SIMPLE_REGEX+" ?("+n+")? ?"+MUSIQ.CHORD_REGEX+"$","m");return e.exec(o)}function isValidChordList(t){throw new Error("not implemented")}var _=(typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null),MUSIQ=require("./base"),Note=require("./Note"),Scale=require("./Scale");module.exports=Chord,Chord.fromNotation=fromNotation,Chord.fromNotes=fromNotes,Chord.contains=contains,Chord.isValidChord=isValidChord,Chord.isValidChordList=isValidChordList,Chord.prototype.notation=notation,Chord.prototype.longNotation=longNotation,Chord.prototype.transpose=transpose,Chord.prototype.noteObjects=noteObjects,Chord.prototype.hasName=hasName,Chord.prototype.toString=toString,Chord.prototype.minNotes=minNotes,Chord.prototype.type=type,Chord.prototype.contains=protoContains;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Note":4,"./Scale":5,"./base":6}],2:[function(require,module,exports){
(function (global){
function fromNotes(r,o){var e=[],t=_.map(r,function(r){return new Note(r)});if(_.isNumber(o)&&o>-1){var n=r.slice();n.sort(function(r,o){return r-o});var i=n[o];n=_.map(n,function(r){return r-i}),n=_.map(n,function(r){if(0>r){var o=r-12*Math.floor(r/12);return console.assert(o>=0),o}return r});var n=_.map(n,function(r){if(!(0>r)){if(12>r)return r;var o=r%12;return MUSIQ.chordExtensionNotes.indexOf(o)>-1?o+12:o}console.log("ERROR: negative note! ")});n=_.uniq(n),n.sort(function(r,o){return r-o});var a=_.filter(MUSIQ.chords,function(r){if(r.optional){var o=_.difference(n,r.optional),e=_.difference(r.notes,r.optional);return _.isEqual(e,n)||_.isEqual(e,o)}return _.isEqual(r.notes,n)},this);a=_.uniq(a);var u=_.map(a,function(r){return new Chord(t,r,new Note(i))});return u.length>0,u}for(var s=[],f=0;f<r.length;f++){var l=new Note(r[f]);if(!(s.indexOf(l.toRelative().pos)>-1)){s.push(l.toRelative().pos);var u=Chords.fromNotes(r,f);e=e.concat(u)}}return!(e.length>0),e}var _=(typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null),MUSIQ=require("./base"),Chord=require("./Chord"),Note=require("./Note"),Chords={};module.exports=Chords,Chords.fromNotes=fromNotes,Chords.fromNotation=Chord.fromNotation;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Chord":1,"./Note":4,"./base":6}],3:[function(require,module,exports){
"use strict";function Interval(e){this.distance=e,this.octaves=Math.floor(this.distance/12),this.relativeDistance=this.distance-12*this.octaves}function name(){return MUSIQ.intervalNames[this.relativeDistance]}function fromNotes(e,t){return new Interval(e.distance(t))}function fromName(e){return new Interval(MUSIQ.intervalNames.indexOf(e))}function interval(e){return Interval.fromName(e)}var MUSIQ=require("./base");module.exports=Interval,Interval.fromName=fromName,Interval.fromNotes=fromNotes,Interval.prototype.name=name,Interval.prototype.toString=name;

},{"./base":6}],"/Users/rulkens/Development/js/node/musiqjs/src/MUSIQ.js":[function(require,module,exports){
(function (global){
'use strict';

var _        = (typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null),
    base     = require('./base'),
    Note     = require('./Note'),
    Chord    = require('./Chord'),
    Chords   = require('./Chords'),
    Scale    = require('./Scale'),
    Interval = require('./Interval'),
    Guitar   = require('./guitar/Guitar');

var MUSIQ = base;

module.exports = MUSIQ;

MUSIQ.match             = match;
MUSIQ.isValidNote       = Note.isValidNote;
MUSIQ.isValidNoteList   = Note.isValidNoteList;
MUSIQ.isValidChord      = Chord.isValidChord;
MUSIQ.isValidChordList  = Chord.isValidChordList;
MUSIQ.isValidScale      = Scale.isValidScale;
MUSIQ.isValidScaleList  = Scale.isValidScaleList;

MUSIQ.note              = note;
MUSIQ.scale             = scale;
MUSIQ.chord             = chord;
MUSIQ.interval          = interval;

MUSIQ.guitar            = guitar;
MUSIQ.guitar.isValidFingerPos = isValidFingerPos;
MUSIQ.guitar.isValidChord = isValidGuitarChord;

// MUSIQ utility functions

/**
 * the very powerful match() function takes a string
 * and tries to find all the matches, be it notes, chords
 * or scales.
 * 
 * @param {string} name - a name of a note, chord or scale
 * 
 * @returns {array} - an array of match objects (Note/Scale/Chord)
 */
function match( name ){

    var ret = [];
    
    if( MUSIQ.isValidNote( name )){
        console.log("Match single note");
       ret.push( Note.fromNotation(name) );
    }
    
    if( MUSIQ.isValidNoteList( name ) ){
        console.log("Match multiple notes");
        ret.concat( Note.fromNotation(name)); 
    } 
    
    if( MUSIQ.isValidChord( name )){
        console.log("Match single chord");
        ret.push( Chords.fromNotation( name ));
    }
    if( MUSIQ.isValidScale( name )){
        console.log("Match single scale");
        ret.push( Chords.fromNotation( name, 'scale' ) );
    }
    
    //console.log( "MUSIQ Match: " + name);
    //console.log( ret );
    
    return ret;
}

/**
 * guitar stuff
 */


/**
 * @returns {array} a list of matches if it's a valid finger position of the notes
 * currently played on a guitar neck
 * 
 * example: "0 2 2 1 0 x" - should get an E-chord
 * 
 */
function isValidFingerPos( tab ){
    var regex = new RegExp("^((xX|[0-9]{1,2})[ -]*){6}$","m");
    return regex.exec( tab );
};

/**
 * @param {GuitarChord} chord - a GuitarChord object
 * 
 * @todo implement function
 */
function isValidGuitarChord( chord ){
    
}

/**
 * create a note object from a notation
 * @param notation
 * @returns {Note}
 */
function note (notation){
    return Note.fromNotation(notation);
}

function chord (notation){
    return Chord.fromNotation(notation);
}

function interval (note1, note2){
    return Interval.fromNotes(note1, note2);
}

function scale (notation){
    return Scale.fromNotation(notation);
}

function guitar (tuning){
    return new Guitar(tuning);
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Chord":1,"./Chords":2,"./Interval":3,"./Note":4,"./Scale":5,"./base":6,"./guitar/Guitar":7}],4:[function(require,module,exports){
(function (global){
"use strict";function Note(t,o){this.pos=t,this.relative=o||!1,this.relative&&(this.pos=this.pos%12)}function fromNotation(t){var o;if(t){var e=isValidNote(t);if(!e)return void console.warn("Note not found : "+name);var n=e[1],r=(e[2]||"").replace("♭","b").replace("♯","#"),i=+e[3]||0,s=1>i;"0"==e[3]&&(s=!1);var a=n.toUpperCase(),p=MUSIQ.notePositions[MUSIQ.noteNames.indexOf(a)],r=MUSIQ.accidentals.indexOf(r)-3;if(-3>r||"undefined"==typeof p||0>p)return console.warn("ERROR: note not found ("+t+")"),null;var u=p+r+12*i;return 0>u&&s&&(u+=12),o=new Note(u,s)}}function fromPos(t){return new Note(t)}function distance(t,o){return o.pos-t.pos}function relativeDistance(t,o){var e=o.toRelative().pos-t.toRelative().pos;return 0>e?e+12:e}function shortestDistance(t,o){return 0}function shortestRelativeDistance(t,o){return 0}function interval(t,o){return new Interval(Note.distance(t,o))}function signature(t){return MUSIQ.signatures[t.toRelative().pos]}function cofPosition(t){return MUSIQ.cofPositions[t.toRelative().pos]}function notation(t,o){var e="";return e=Note.signatureIsFlat(o)?MUSIQ.flatNames[t.relPos()]+(t.relative?"":t.octave()):MUSIQ.sharpNames[t.relPos()]+(t.relative?"":t.octave()),e.replace("b","♭").replace("#","♯")}function simpleNotation(t,o){var e,n=t;return t instanceof Note||(n=new Note(t)),e=Note.signatureIsFlat(o)?MUSIQ.flatNames[n.relPos()]:MUSIQ.sharpNames[n.relPos()],e.replace("b","♭").replace("#","♯")}function signatureIsFlat(t){return"undefined"==typeof t?!1:_.isBoolean(t)?t:0>t}function transpose(t,o){return new Note(_.isNumber(o)?t.pos+o:_.isString(o)?t.pos+Interval.fromName(o).distance:t.pos+o.distance)}function protoDistance(t){return Note.distance(this,t)}function protoRelativeDistance(t){return Note.relativeDistance(this,t)}function protoShortestDistance(t){return Note.shortestDistance(this,t)}function protoInterval(t){return Note.interval(this,t)}function protoSignature(){return Note.signature(this)}function protoCofPosition(){return Note.cofPosition(this)}function protoNotation(t){return Note.notation(this,t)}function protoSimpleNotation(t){return Note.simpleNotation(this,t)}function protoHasName(t){return Note.fromNotation(t)&&this.relPos()==Note.fromNotation(t).relPos()}function protoOctave(){return Math.floor(this.pos/12)}function protoToRelative(){return new Note(this.pos-12*this.octave())}function protoRelPos(){return this.relative?this.pos:this.toRelative().pos}function protoTranspose(t){return Note.transpose(this,t)}function protoType(){return"note"}function protoFrequency(){return 440*Math.pow(2,(this.pos-69)/12)}function isValidNote(t){if(!t)return!1;var o=new RegExp("^"+MUSIQ.NOTE_REGEX+"?$","m");return o.exec(t)}function isValidNoteList(t){throw new Error("not implemented")}var _=(typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null),MUSIQ=require("./base"),Interval=require("./Interval");module.exports=Note,Note.fromNotation=fromNotation,Note.fromPos=fromPos,Note.distance=distance,Note.relativeDistance=relativeDistance,Note.shortestDistance=shortestDistance,Note.shortestRelativeDistance=shortestRelativeDistance,Note.interval=interval,Note.signature=signature,Note.cofPosition=cofPosition,Note.notation=notation,Note.simpleNotation=simpleNotation,Note.signatureIsFlat=signatureIsFlat,Note.transpose=transpose,Note.isValidNote=isValidNote,Note.isValidNoteList=isValidNoteList,Note.prototype.distance=protoDistance,Note.prototype.relativeDistance=protoRelativeDistance,Note.prototype.shortestDistance=protoShortestDistance,Note.prototype.interval=protoInterval,Note.prototype.signature=protoSignature,Note.prototype.cofPosition=protoCofPosition,Note.prototype.notation=protoNotation,Note.prototype.simple=protoSimpleNotation,Note.prototype.simpleNotation=protoSimpleNotation,Note.prototype.hasName=protoHasName,Note.prototype.octave=protoOctave,Note.prototype.toRelative=protoToRelative,Note.prototype.rel=protoToRelative,Note.prototype.relPos=protoRelPos,Note.prototype.transpose=protoTranspose,Note.prototype.type=protoType,Note.prototype.frequency=protoFrequency,Note.prototype.toString=protoSimpleNotation;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./Interval":3,"./base":6}],5:[function(require,module,exports){
"use strict";function isValidScale(e){if(!e)return!1;var i=e;e&&0!==e.length||(i="M");var a=_.reduce(MUSIQ.scales,function(e,i){var a=_.isString(e)?e:e.names.join("|");return a+"|"+i.names.join("|")}),n=new RegExp("^"+MUSIQ.NOTE_SIMPLE_REGEX+" ?("+a+")? ?"+MUSIQ.SCALE_REGEX+"$","m");return n.exec(i)}function isValidScaleList(e){throw new Error("not implemented")}var Scale={};Scale.isValidScale=isValidScale,Scale.isValidScaleList=isValidScaleList,module.exports=Scale,Scale.fromTonicAndType=function(e,i){},Scale.extend=function(e,i){this.startOctave=e,this.endOctave=i};

},{}],6:[function(require,module,exports){
module.exports={noteNames:["C","D","E","F","G","A","B"],notePositions:[0,2,4,5,7,9,11],sharpNames:["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],flatNames:["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"],accidentals:["bbb","bb","b","","#","##","###"],cofPositions:[0,7,2,9,4,11,6,1,8,3,10,5],tonicPositions:[0,5,7,2,9,4,11,6,1,8,3,10],signatures:[0,-5,2,-3,4,-1,6,1,-4,3,-2,5],solfege:["do","di","re","me","mi","fa","se","sol","le","la","te","ti"],intervalNames:["unison","minor second","major second","minor third","major third","fourth","tritone","fifth","minor sixth","major sixth","minor seventh","major seventh","octave"],chordExtensionNotes:[1,2,8,9],chords:[{names:["5","power"],longName:" power",notes:[0,7]},{names:["maj","M","ma","major",""],longName:"major",notes:[0,4,7]},{names:["m","mi","min","minor","-"],longName:"minor",notes:[0,3,7]},{names:["dim","diminished","o"],longName:"diminished",notes:[0,3,6]},{names:["aug","augmented","a"],longName:"augmented",notes:[0,4,8]},{names:["sus2"],longName:"suspended 2nd",notes:[0,2,7]},{names:["sus4","su","sus"],longName:"suspended 4th",notes:[0,5,7]},{names:["maj7","maj 7","major 7"],longName:"major 7th",notes:[0,4,7,11],optional:[7]},{names:["m7","mi7","min7","minor 7","-7"],longName:"minor 7th",notes:[0,3,7,10],optional:[7]},{names:["7","M7"],longName:"dominant 7th",notes:[0,4,7,10],optional:[7]},{names:["dim7","dim 7"],longName:"diminished 7th",notes:[0,3,6,9]},{names:["m7b5","ø7","-7b5","m7(b5)"],longName:"half diminished",notes:[0,3,6,10]},{names:["mM7"],longName:"minor major seventh",notes:[0,3,7,11],optional:[7]},{names:["6"],longName:"major 6th",notes:[0,4,7,9],optional:[7]},{names:["m6"],longName:"minor 6th",notes:[0,3,7,9],optional:[7]},{names:["9","M9"],longName:"dominant 9th",notes:[0,4,7,10,14],optional:[7]},{names:["maj9"],longName:"major 9th",notes:[0,4,7,11,14],optional:[7]},{names:["m9"],longName:"minor 9th",notes:[0,3,7,10,14],optional:[7]},{names:["madd9","m add9","min add9"],longName:"minor add 9th",notes:[0,3,7,14],optional:[7]},{names:["add9","Madd9","maj add9"],longName:"major add 9th",notes:[0,4,7,14],optional:[7]},{names:["6/9","69"],longName:"6 9th chord",notes:[0,4,7,9,14],optional:[7]},{names:[" b9","Mb9","maj b9"],longName:"major flat 9th",notes:[0,4,7,11,13],optional:[7]},{names:["7b9","M7b9","7 b9"],longName:"dominant 7th flat 9th",notes:[0,4,7,10,13],optional:[7]},{names:["7#9","M7#9","7 #9","hendrix","7alt"],longName:"dominant 7th sharp 9th",notes:[0,3,4,7,10],optional:[7]},{names:["#9","M#9","M #9","maj #9"],longName:"sharp 9th",notes:[0,4,7,15],optional:[7]},{names:["maj11"],longName:"major 11th",notes:[0,4,7,11,17],optional:[7]},{names:["m11"],longName:"minor 11th",notes:[0,3,7,10,17],optional:[7,10]},{names:["11"],longName:"dominant 11th",notes:[0,4,7,10,17],optional:[7,10]},{names:["maj13"],longName:"major 13th",notes:[0,4,7,11,21],optional:[7]},{names:["m13"],longName:"minor 13th",notes:[0,3,7,10,21],optional:[7]},{names:["13","M13"],longName:"dominant 13th",notes:[0,4,7,10,21],optional:[7]},{names:[" b13"],longName:"flat 13th",notes:[0,4,7,10,20],optional:[7]}],scales:[{names:["chromatic","chro"],longName:"chromatic",notes:[0,1,2,3,4,5,6,7,8,9,10,11]},{names:["major","ionian","-major"],longName:"major",notes:[0,2,4,5,7,9,11]},{names:["minor","aeolian"],longName:"minor",notes:[0,2,3,5,7,8,10]},{names:["major pentatonic","pentatonic"],longName:"major pentatonic",notes:[0,2,4,7,9]},{names:["minor pentatonic","relative minor pentatonic"],longName:"relative minor pentatonic",notes:[0,3,5,7,10]},{names:["major blues","blues major","blues","hexatonic"],longName:"major blues",notes:[0,2,4,6,7,9]},{names:["minor blues","blues minor","m blues"],longName:"minor blues",notes:[0,3,5,6,7,10]},{names:["ionian","Major"],longName:"ionian",notes:[0,2,4,5,7,9,11]},{names:["dorian"],longName:"dorian",notes:[0,2,3,5,7,9,10]},{names:["phrygian"],longName:"phrygian",notes:[0,1,3,5,7,8,10]},{names:["lydian"],longName:"lydian",notes:[0,2,4,6,7,9,11]},{names:["mixolydian"],longName:"mixolydian",notes:[0,2,4,5,7,9,10]},{names:["aeolian","natural minor"],longName:"aeolian",notes:[0,2,3,5,7,8,10]},{names:["locrian"],longName:"locrian",notes:[0,1,3,5,6,8,10]}],NOTE_REGEX:"([A-G]|[a-g])(bbb|bb|b|#|##)? ?([0-9])? ?(n|no|not|note|notes)",NOTE_SIMPLE_REGEX:"([A-G]|[a-g])(bbb|bb|b|#|##|###)?",SCALE_REGEX:"(s|sc|sca|scal|scale)?",CHORD_REGEX:"(c|ch|cho|chrd|chor|chord)?"};

},{}],7:[function(require,module,exports){
(function (global){
"use strict";function Guitar(t){this.strings=[],this.tuning(t||"standard"),this.FRETS_SHOWN=Guitar.FRETS_SHOWN,this.frets=[];for(var o=0;o<this.FRETS_SHOWN;o++)this.frets[o]=new GuitarFret(this,o);this.createNotes()}function createNotes(){this.notes=_.map(this.strings,function(t,o){return _.map(this.frets,function(e,n){return this.notes[o]&&this.notes[o][n]?(this.notes[o][n].note.pos=t.base+n,this.notes[o][n]):new GuitarNote(this,t,e,[o,n])},this)},this)}function tuning(t){return t?(this._tuning=Guitar.tunings[t],this._tuning?(this.strings=_.map(this._tuning.notes,function(t,o){return new GuitarString(this,o,t)},this),this.createNotes(),this._tuning):void console.warn("Tuning not found! "+t)):this._tuning}function chordsFromFingerPos(t){return Chords.fromNotes(this.notesFromFingerPos(t))}function chordFromFingerPos(t){return Chord.fromNotes(this.notesFromFingerPos(t))}function chordsFromActiveNotes(){var t=_.map(this.activeNotes(),function(t){return t.notePos()});return Chord.fromNotes(t)}function activeMatches(){var t=_.map(this.activeNotes(),function(t){return t.notePos()}),o=Chords.fromNotes(t);return o?o:_.map(this.activeNotes(),function(t){return t.note})}function activeNotes(){var t=[];return _.each(this.notes,function(o){_.each(o,function(o){o.active()&&t.push(o)})}),t}function notesFromFingerPos(t){var o=[];return _.each(t,function(t,e){t>-1&&o.push(this.notes[e][t].note.pos)},this),o}function posFromChord(t){}function notesOnFret(t){return _.map(this.strings,function(o,e){return this.notes[e][t]},this)}function notesOnString(t){return this.notes[t]}function noteOnPos(t){return this.notes[t[0]][t[1]]}function notationFor(t,o){return this.notes[t][o].note.simpleNotation()}function transpose(t){var o=_.map(this.notes,function(t){return _.map(t,function(t){return _.clone(t.state)})});return _.each(this.notes,function(e,n){_.each(e,function(e,r){var s=r-t;s>-1&&s<Guitar.FRETS_SHOWN?e.state=o[n][s]:e.state=_.clone(GuitarNote.DEFAULT_STATE)})}),this}function show(t){return t?(this.clearFretboard(),_.each(t,function(t,o){console.log(o);var e={only:!0,active:!0,ghosted:o>0};"note"==t.type()?(this.showNotes([t],e),e.tonic=!0):("chord"==t.type()||"scale"==t.type())&&this.showChords([t],e)},this),this):this}function showNotes(t,o){console.log("ShowNotes ");var e=o||{only:!0,active:!0},n=_.map(t,function(t){return t instanceof Note?t:_.isNumber(t)?12>t?new Note(t,!0):new Note(t):_.isString(t)?Note.fromNotation(t):(console.log("Note not recognized! "),void console.log(t))});return console.log(n),_.each(this.notes,function(t){_.each(t,function(t){var o=_.find(n,function(o){if(!o)return!1;if(o.relative){if(t.relativeNotePos()==o.pos)return!0}else if(t.notePos()==o.pos)return!0;return!1});e.only?t.active(o):o&&t.active(o),e.active&&t.active(o),e.tonic&&t.tonic(o),e.ghosted&&t.ghosted(o)})}),this}function showChords(t){return console.log("ShowChords "),console.log(t),t&&t.length>0&&(this.showNotes(t[0].notes),this.showTonic(t[0].tonic)),this}function showScales(t){return console.log("Function showScales not implemented!"),this}function showTonic(t){return console.log("Showing tonic"),console.log(t),this.showNotes([t],{only:!1,tonic:!0})}function showFrets(t){return _.each(this.notes,function(o,e){t[e]>-1&&o[t[e]].active(!0)}),this}function clearFretboard(){return _.each(this.notes,function(t){_.each(t,function(t){t.state={active:!1,ghosted:!1,root:!1}})}),this}var _=(typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null),MUSIQ=require("../base"),Chord=require("../Chord"),Chords=require("../Chords"),GuitarFret=require("./GuitarFret"),GuitarNote=require("./GuitarNote"),GuitarString=require("./GuitarString"),GuitarChord=require("./GuitarChord");module.exports=Guitar,Guitar.prototype.createNotes=createNotes,Guitar.prototype.tuning=tuning,Guitar.prototype.chordsFromFingerPos=chordsFromFingerPos,Guitar.prototype.chordFromFingerPos=chordFromFingerPos,Guitar.prototype.chordsFromActiveNotes=chordsFromActiveNotes,Guitar.prototype.activeMatches=activeMatches,Guitar.prototype.activeNotes=activeNotes,Guitar.prototype.notesFromFingerPos=notesFromFingerPos,Guitar.prototype.posFromChord=posFromChord,Guitar.prototype.notesOnFret=notesOnFret,Guitar.prototype.notesOnString=notesOnString,Guitar.prototype.noteOnPos=noteOnPos,Guitar.prototype.notationFor=notationFor,Guitar.prototype.transpose=transpose,Guitar.prototype.show=show,Guitar.prototype.showNotes=showNotes,Guitar.prototype.showChords=showChords,Guitar.prototype.showScales=showScales,Guitar.prototype.showTonic=showTonic,Guitar.prototype.showFrets=showFrets,Guitar.prototype.clearFretboard=clearFretboard,Guitar.tunings={standard:{name:"Standard",notes:[40,45,50,55,59,64]},"drop d":{name:"Drop D",notes:[38,45,50,55,59,64]},"open g":{name:"Open G",notes:[38,43,50,55,59,62]},fourths:{name:"All Fourths",notes:[40,45,50,55,60,65]},ukelele:{name:"Ukelele Standard",notes:[67,60,64,69]}},Guitar.FRETS_SHOWN=16;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Chord":1,"../Chords":2,"../base":6,"./GuitarChord":8,"./GuitarFret":9,"./GuitarNote":10,"./GuitarString":11}],8:[function(require,module,exports){
(function (global){
"use strict";function GuitarChord(o,r,t){this.guitar=o,this.chord=r,this.notes=t,this._barre=0}function fromChordAndBase(o,r,t){var n=t.stringPos(),e=(t.fretPos(),r.notes.length-(r.optional?r.optional.length:0));if(!(n+e>o.strings.length)){var a=[],s=r.notes;a.push([t]);for(var i=n+1;i<o.strings.length;i++){var l=_.filter(o.notes[i],function(o){return _.contains(s,o.relPos())});l=_.filter(l,function(o){return Math.abs(o.distanceTo(t)[1])<=GuitarChord.MAX_STRETCH?!0:void 0}),l&&0!=l.length?1==l.length?a.push(l):a.push(l):console.log("No notes on string found!")}var s=a;console.log("FoundNotes:"),console.log(s);var u=function(o){if(0==o.length)return[];if(1==o.length)return o[0];var r=u(_.rest(o)),t=[];return _.each(_.first(o),function(o){_.each(r,function(r){t.push([o].concat(r))})}),t},h=u(s);console.log("STEP 2 - # of matches"),console.log(h.length);var h=_.filter(h,function(o){var t=r.relNotes.slice(),n=_.map(o,function(o){return o.relPos()});return 0==_.difference(t,n).length});console.log("STEP 3 - # of matches"),console.log(h.length);var h=_.filter(h,function(o){var r=_.map(o,function(o){return o.fretPos()}),t=_.min(r),n=_.max(r);if(Math.abs(t-n)>GuitarChord.MAX_STRETCH)return!1;for(var e=1;e<o.length;e++)if(Math.abs(o[e].fretPos()-o[e-1].fretPos())>GuitarChord.MAX_STRETCH)return!1;return console.log("match ",r),!0});return console.log("STEP 4 - # of matches"),console.log(h.length),s}}function fromChord(o,r){if(!r.relative)return console.warn("Relative chord not allowed!"),null;var t=[];return _.each(o.notes,function(o,n){_.each(o,function(o,n){r.contains(o.note)&&t.push(o)})}),console.log(t),_.compact(_.map(t,function(t){var n=GuitarChord.fromChordAndBase(o,r,t);return n}))}function valid(){}function barre(){var o=0,r=_.last(this.guitar.frets);return _.pluck(this.notes,"fret").reverse().each(function(t){t==r&&o++}),console.log(o),o}var _=(typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null);module.exports=GuitarChord,GuitarChord.fromChordAndBase=fromChordAndBase,GuitarChord.fromChord=fromChord,GuitarChord.prototype.valid=valid,GuitarChord.prototype.barre=barre,GuitarChord.MAX_STRETCH=3;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],9:[function(require,module,exports){
"use strict";function GuitarFret(t,s){this.guitar=t,this.pos=s,this.barre=!1}function notes(){return this.guitar.notesOnFret(this.pos)}function className(){return 3==this.pos?"third":5==this.pos?"fifth":7==this.pos?"seventh":9==this.pos?"ninth":12==this.pos?"twelfth":void 0}module.exports=GuitarFret,GuitarFret.prototype.className=className,GuitarFret.prototype.notes=notes;

},{}],10:[function(require,module,exports){
(function (global){
"use strict";function GuitarNote(t,o,e,i,n){this.guitar=t,this.guitarString=o,this.fret=e,this.pos=i,this.state=n||_.clone(GuitarNote.DEFAULT_STATE),this.note=new Note(o.base+e.pos)}function notation(){return this.note.notation()}function simple(t){return this.note.simpleNotation(t)}function active(t){return"undefined"!=typeof t?(this.state.active=t,this.state.active):this.state.active}function tonic(t){return"undefined"!=typeof t?(this.state.tonic=t,this.state.tonic):this.state.tonic}function ghosted(t){return"undefined"!=typeof t?(this.state.ghosted=t,this.state.ghosted):this.state.ghosted}function fretPos(){return this.pos[1]}function stringPos(){return this.pos[0]}function onlyActive(t){return this.guitarString.onlyActive(this.pos[1],t)}function className(t){var o=[];return this.state.active&&o.push("active"),this.state.ghosted&&o.push("ghosted"),this.state.tonic&&o.push("tonic"),t&&o.push(this.intervalToTonic(t).name().replace(" ","-")),o.join(" ")}function intervalToTonic(t){return t?t.interval(this.note):void 0}function notePos(){return this.note.pos}function relativeNotePos(){return this.note.toRelative().pos}function distanceTo(t){return[t.pos[0]-this.pos[0],t.pos[1]-this.pos[1]]}function toString(){return"[GuitarNote "+this.note.toString()+"]"}var _=(typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null),Note=require("../Note");module.exports=GuitarNote,GuitarNote.prototype.notation=notation,GuitarNote.prototype.simple=simple,GuitarNote.prototype.active=active,GuitarNote.prototype.tonic=tonic,GuitarNote.prototype.ghosted=ghosted,GuitarNote.prototype.fretPos=fretPos,GuitarNote.prototype.stringPos=stringPos,GuitarNote.prototype.onlyActive=onlyActive,GuitarNote.prototype.className=className,GuitarNote.prototype.intervalToTonic=intervalToTonic,GuitarNote.prototype.notePos=notePos,GuitarNote.prototype.relPos=relativeNotePos,GuitarNote.prototype.relativeNotePos=relativeNotePos,GuitarNote.prototype.distanceTo=distanceTo,GuitarNote.prototype.toString=toString,GuitarNote.DEFAULT_STATE={active:!1,ghosted:!1,tonic:!1};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../Note":4}],11:[function(require,module,exports){
(function (global){
"use strict";function GuitarString(t,e,i){this.guitar=t,this.pos=e,this.base=i}function noteOnFret(t){return this.guitar[this.pos][t.pos]}function matchNotes(t){throw new Error("not implemented")}function activeNotes(t){throw new Error("not implemented")}function onlyActive(t,e){return _.each(this.guitar.notes[this.pos],function(i,o){o==t?i.active(e):i.active(!1)},this),this}var _=(typeof window !== "undefined" ? window['_'] : typeof global !== "undefined" ? global['_'] : null);module.exports=GuitarString,GuitarString.prototype.noteOnFret=noteOnFret,GuitarString.prototype.matchNotes=matchNotes,GuitarString.prototype.activeNotes=activeNotes,GuitarString.prototype.onlyActive=onlyActive;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}]},{},[]);
